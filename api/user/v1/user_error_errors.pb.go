// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsUnknownError(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserServiceErrorReason_UNKNOWN_ERROR.String() && e.Code == 500
}

func ErrorUnknownError(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserServiceErrorReason_UNKNOWN_ERROR.String(), fmt.Sprintf(format, args...))
}

func IsParamNotEnough(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserServiceErrorReason_PARAM_NOT_ENOUGH.String() && e.Code == 500
}

func ErrorParamNotEnough(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserServiceErrorReason_PARAM_NOT_ENOUGH.String(), fmt.Sprintf(format, args...))
}

func IsParamInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserServiceErrorReason_PARAM_INVALID.String() && e.Code == 500
}

func ErrorParamInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserServiceErrorReason_PARAM_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsUserExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserServiceErrorReason_USER_EXIST.String() && e.Code == 500
}

func ErrorUserExist(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserServiceErrorReason_USER_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsUserNotExist(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserServiceErrorReason_USER_NOT_EXIST.String() && e.Code == 500
}

func ErrorUserNotExist(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserServiceErrorReason_USER_NOT_EXIST.String(), fmt.Sprintf(format, args...))
}

func IsTokenInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserServiceErrorReason_TOKEN_INVALID.String() && e.Code == 500
}

func ErrorTokenInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserServiceErrorReason_TOKEN_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsTokenExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserServiceErrorReason_TOKEN_EXPIRE.String() && e.Code == 500
}

func ErrorTokenExpire(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserServiceErrorReason_TOKEN_EXPIRE.String(), fmt.Sprintf(format, args...))
}

func IsRefreshTokenInvalid(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserServiceErrorReason_REFRESH_TOKEN_INVALID.String() && e.Code == 500
}

func ErrorRefreshTokenInvalid(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserServiceErrorReason_REFRESH_TOKEN_INVALID.String(), fmt.Sprintf(format, args...))
}

func IsRefreshTokenExpire(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == UserServiceErrorReason_REFRESH_TOKEN_EXPIRE.String() && e.Code == 500
}

func ErrorRefreshTokenExpire(format string, args ...interface{}) *errors.Error {
	return errors.New(500, UserServiceErrorReason_REFRESH_TOKEN_EXPIRE.String(), fmt.Sprintf(format, args...))
}
